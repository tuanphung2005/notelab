name: release

on:
  push:
    branches: [ main, dev, develop ]
    paths-ignore:
      - 'package.json'
      - 'package-lock.json'
      - '.github/**'
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to release from'
        required: false
        default: 'dev'
        type: choice
        options:
          - dev
          - main

permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''
          - platform: 'macos-latest'
            args: '--target universal-apple-darwin'

    runs-on: ${{ matrix.platform }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: 'latest'

    - name: Cache Bun dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.bun/install/cache
          node_modules
        key: ${{ runner.os }}-bun-${{ hashFiles('bun.lockb') }}
        restore-keys: |
          ${{ runner.os }}-bun-

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install Rust targets for macOS universal binary
      if: matrix.platform == 'macos-latest'
      run: |
        rustup target add aarch64-apple-darwin
        rustup target add x86_64-apple-darwin

    - name: Rust cache
      uses: swatinem/rust-cache@v2
      with:
        workspaces: './src-tauri -> target'

    - name: Install Linux dependencies
      if: matrix.platform == 'ubuntu-22.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libwebkit2gtk-4.1-dev \
          build-essential \
          curl \
          wget \
          file \
          libssl-dev \
          libgtk-3-dev \
          libayatana-appindicator3-dev \
          librsvg2-dev \
          patchelf
        
    - name: Install dependencies
      run: bun install --frozen-lockfile

    - name: Build Tauri app
      run: bun run tauri build ${{ matrix.args }}

    - name: Upload artifacts (Linux)
      if: matrix.platform == 'ubuntu-22.04'
      uses: actions/upload-artifact@v4
      with:
        name: linux-artifacts
        path: src-tauri/target/release/bundle/
        if-no-files-found: error

    - name: Upload artifacts (Windows)
      if: matrix.platform == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: windows-artifacts
        path: src-tauri/target/release/bundle/
        if-no-files-found: error

    - name: Upload artifacts (macOS)
      if: matrix.platform == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: macos-artifacts
        path: src-tauri/target/release/bundle/
        if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Configure git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Get current version
      id: current_version
      run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

    - name: Bump version based on branch
      run: |
        if [[ "${{ github.ref_name }}" == "main" ]]; then
          # Main branch: bump patch version (1.0.0 -> 1.0.1)
          npm version patch --no-git-tag-version
        else
          # Dev branch: add/increment pre-release version
          current_version=$(node -p "require('./package.json').version")
          if [[ $current_version =~ -dev\.[0-9]+$ ]]; then
            # Already has dev suffix, increment it (1.0.1-dev.1 -> 1.0.1-dev.2)
            npm version prerelease --preid=dev --no-git-tag-version
          else
            # No dev suffix, add it (1.0.1 -> 1.0.1-dev.1)
            npm version prerelease --preid=dev --no-git-tag-version
          fi
        fi
        
    - name: Get new version
      id: new_version
      run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
        
    - name: Commit version bump
      run: |
        git add package.json
        git commit -m "ðŸ”– bump version to v${{ steps.new_version.outputs.version }}"
        
    - name: Create tag
      run: git tag "v${{ steps.new_version.outputs.version }}"
        
    - name: Push changes
      run: |
        git pull origin ${{ github.ref_name }} --rebase
        git push origin ${{ github.ref_name }} --follow-tags

    - name: Download Linux artifacts
      uses: actions/download-artifact@v4
      with:
        name: linux-artifacts
        path: ./linux-bundle/

    - name: Download Windows artifacts
      uses: actions/download-artifact@v4
      with:
        name: windows-artifacts
        path: ./windows-bundle/

    - name: Download macOS artifacts
      uses: actions/download-artifact@v4
      with:
        name: macos-artifacts
        path: ./macos-bundle/

    - name: List downloaded artifacts (debug)
      run: |
        echo "=== Artifact directory structure ==="
        find ./linux-bundle -type f -ls 2>/dev/null || echo "No linux artifacts found"
        find ./windows-bundle -type f -ls 2>/dev/null || echo "No windows artifacts found"
        find ./macos-bundle -type f -ls 2>/dev/null || echo "No macOS artifacts found"

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: "v${{ steps.new_version.outputs.version }}"
        name: "Release v${{ steps.new_version.outputs.version }}"
        body: |
          ðŸš€ Auto-generated release for version ${{ steps.new_version.outputs.version }}
          
          **Branch:** ${{ github.ref_name }}
          **Type:** ${{ github.ref_name == 'main' && 'Stable Release' || 'Development Pre-release' }}
          
          **Changes:**
          - Auto-bumped version from v${{ steps.current_version.outputs.version }} to v${{ steps.new_version.outputs.version }}
        draft: false
        prerelease: ${{ github.ref_name != 'main' }}
        files: |
          ./linux-bundle/deb/*.deb
          ./linux-bundle/rpm/*.rpm
          ./linux-bundle/appimage/*.AppImage
          ./windows-bundle/nsis/*.exe
          ./windows-bundle/msi/*.msi
          ./macos-bundle/dmg/*.dmg
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}